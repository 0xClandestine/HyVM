// Resouces https://medium.com/aztec-protocol/from-zero-to-nowhere-smart-contract-programming-in-huff-1-2-ba2b6de7fa83
// TODO emit nice reverts https://docs.huff.sh/get-started/huff-by-example/#custom-errors
#include "debug-utils.huff"
#include "macros.huff"
#include "./checkers/contract-verifier.huff"

// === define where we'll store VM private things

// will store the pointer at mem 0, and correct all memory writes
#define constant EXEC_POINTER_MSLOT = 0x0


/* Generated at: https://www.evm.codes/
    const byId = new Map([...document.getElementsByTagName('tbody')[0].children].map(c => {
        const children =   [...c.children];
        return [parseInt(children[0].innerText, 16), 'op_' + children[1].innerText.toLowerCase()];
    }))
    Array(256).fill(null).map((_, i) => byId.get(i) || 'unused').join(' ')


    and then, adapted
*/
#define jumptable__packed OPCODES_JUMPTABLE {
op_stop             op_add          op_mul          op_sub      op_div          op_sdiv         op_mod          op_smod             op_addmod       op_mulmod       op_exp          op_signextend   unused          unused              unused              unused
op_lt               op_gt           op_slt          op_sgt      op_eq           op_iszero       op_and          op_or               op_xor          op_not          op_byte         op_shl          op_shr          op_sar              unused              unused
op_sha3             unused          unused          unused      unused          unused          unused          unused              unused          unused          unused          unused          unused          unused              unused              unused
op_address          op_balance      op_origin       op_caller   op_callvalue    op_calldataload op_calldatasize op_calldatacopy     op_codesize     op_codecopy     op_gasprice     op_extcodesize  op_extcodecopy  op_returndatasize   op_returndatacopy   op_extcodehash
op_blockhash        op_coinbase     op_timestamp    op_number   op_difficulty   op_gaslimit     op_chainid      op_selfbalance      op_basefee      unused          unused          unused          unused          unused              unused              unused
op_pop              op_mload        op_mstore       op_mstore8  op_sload        op_sstore       op_jump         op_jumpi            op_pc           op_msize        op_gas          op_jumpdest     unused          unused              unused              unused
op_pushi            op_pushi        op_pushi        op_pushi    op_pushi        op_pushi        op_pushi        op_pushi            op_pushi        op_pushi        op_pushi        op_pushi        op_pushi        op_pushi            op_pushi            op_pushi
op_pushi            op_pushi        op_pushi        op_pushi    op_pushi        op_pushi        op_pushi        op_pushi            op_pushi        op_pushi        op_pushi        op_pushi        op_pushi        op_pushi            op_pushi            op_pushi
op_dup1             op_dup2         op_dup3         op_dup4     op_dup5         op_dup6         op_dup7         op_dup8             op_dup9         op_dup10        op_dup11        op_dup12        op_dup13        op_dup14            op_dup15            op_dup16
op_swap1            op_swap2        op_swap3        op_swap4    op_swap5        op_swap6        op_swap7        op_swap8            op_swap9        op_swap10       op_swap11       op_swap12       op_swap13       op_swap14           op_swap15           op_swap16
op_log0             op_log1         op_log2         op_log3     op_log4         unused          unused          unused              unused          unused          unused          unused          unused          unused              unused              unused
unused              unused          unused          unused      unused          unused          unused          unused              unused          unused          unused          unused          unused          unused              unused              unused
unused              unused          unused          unused      unused          unused          unused          unused              unused          unused          unused          unused          unused          unused              unused              unused
unused              unused          unused          unused      unused          unused          unused          unused              unused          unused          unused          unused          unused          unused              unused              unused
unused              unused          unused          unused      unused          unused          unused          unused              unused          unused          unused          unused          unused          unused              unused              unused
op_create           op_call         op_callcode     op_return   op_delegatecall op_create2      unused          unused              unused          unused          op_staticcall   unused          unused          op_revert           op_invalid          selfdestruct
}

#define macro INIT_JUMPTABLE() = takes(0) returns(0) {
    __tablesize(OPCODES_JUMPTABLE) __tablestart(OPCODES_JUMPTABLE) [OPCODES_JUMPTABLE_MSLOT] codecopy
}

#define macro JUMPTABLE_LOCATION() = takes(1) returns (1) {
    /*
        // to investigate jumptable issues, this is usefull:

            op_delegatecall CONSOLE_LOG_UINT() pop // log the location of a label
            0xF4 JUMPTABLE_LOCATION() CONSOLE_LOG_UINT() pop // log the resolved location of the corresponding instruction

            // log the full jumptable
            [OPCODES_JUMPTABLE_MSLOT]
            0x00 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            0x20 add dup1 mload CONSOLE_LOG_UINT() pop
            pop

    */

    // 2 bytes per instruction (jumptable_packed)
    0x2 mul
    [OPCODES_JUMPTABLE_MSLOT] add // => [memory location in jumptable]
    mload // => [code location]

    // only get the first two bytes
    0xF0 shr

}

#define macro JUMP_TO_OPCODE() = takes(1) returns (0) {
    JUMPTABLE_LOCATION()
    jump // jump to location => []
}



// top stack item is a memory location: adjust the top stack item to prevent writing exec pointer.
#define macro FIX_MEMOFFSET() = takes (1) returns (1) {
    // offsets all memory instructions to locate them at the end of the jump table
    // => everything before will be owned by the VM, and innaccessible by the host.
    [OPCODES_JUMPTABLE_MSLOT] add
    __tablesize(OPCODES_JUMPTABLE) add
}


// get the host instruction at given pointer location, and advance pointer by one
// (nb: this is used both by CONTINUE() and by jump instruction)
#define macro GOTO_AND_ADVANCE() = takes (1) returns (1) {

    dup1 // => [ptr, ptr]
    calldataload // => [256 bits of code starting at execution pointer, ptr]

    // extract opcode from leftmost byte   => [opcode, ptr]
    0xF8 shr // F8 = 248 = 256 - 8

    // increment the exec pointer to the next byte
    //  ... equivalent to INCREMENT_EXEC_PTR(), but avoids an mload.
    swap1 // => [ptr, opcode]
    0x1 add// => [new ptr, opcode]
    [EXEC_POINTER_MSLOT] mstore // => [opcode]
}

#define macro CONTINUE() = takes(0) returns (1) {

    // load the instruction located at this execution pointer
    [EXEC_POINTER_MSLOT] mload

    GOTO_AND_ADVANCE() // => [opcode]


    // // console.log('opcode:')
    // 0x6f70636f64653a00000000000000000000000000000000000000000000000000
    // 0x0000000000000000000000000000000000000000000000000000000000000007
    // CONSOLE_LOG()
    // // console.log(opcode)
    // CONSOLE_LOG_UINT()

    // todo reactor this ?
    // pushi nees to have the opcode on stack (but this forces all other opcodes to pop before execution)
    dup1 // => [opcode, opcode]

    // jump to the operation given on stack
    JUMP_TO_OPCODE()
}



#define macro CONSTRUCTOR() = takes(0) returns (0) {
    // Set msg.sender as the owner
    // this will ensure that when called with a regular call (not a delegatecall), nobody can take ownership here.
    // (but people will be able to take ownership on their own instance because ONLY_OWNER is OK when there is no owner set)
    caller [OWNER_SSLOT] sstore
}


// start program
#define macro MAIN() = takes(0) returns (0) {

    // check that we're not re-entring in the contract
    // NON_REENTRANT()
    INIT_JUMPTABLE()
    CONTINUE()



// =====================================================================================================================

    notimplemented:
        // console.log('not implemented:')
        0x6e6f7420696d706c656d656e7465643a00000000000000000000000000000000
        0x10
        CONSOLE_LOG()
        CONSOLE_LOG_UINT() // log opcode

    op_stop:
        pop //  => [] dont need the opcode
        stop
        CONTINUE()
    op_add:
        pop //  => [] dont need the opcode
        add

        CONTINUE()
    op_mul:
        pop //  => [] dont need the opcode
        mul
        CONTINUE()
    op_sub:
        pop //  => [] dont need the opcode
        sub
        CONTINUE()
    op_div:
        pop //  => [] dont need the opcode
        div
        CONTINUE()
    op_sdiv:
        pop //  => [] dont need the opcode
        sdiv
        CONTINUE()
    op_mod:
        pop //  => [] dont need the opcode
        mod
        CONTINUE()
    op_smod:
        pop //  => [] dont need the opcode
        smod
        CONTINUE()
    op_addmod:
        pop //  => [] dont need the opcode
        addmod
        CONTINUE()
    op_mulmod:
        pop //  => [] dont need the opcode
        mulmod
        CONTINUE()
    op_exp:
        pop //  => [] dont need the opcode
        exp
        CONTINUE()
    op_signextend:
        pop //  => [] dont need the opcode
        signextend
        CONTINUE()
    op_lt:
        pop //  => [] dont need the opcode
        lt
        CONTINUE()
    op_gt:
        pop //  => [] dont need the opcode
        gt
        CONTINUE()
    op_slt:
        pop //  => [] dont need the opcode
        slt
        CONTINUE()
    op_sgt:
        pop //  => [] dont need the opcode
        sgt
        CONTINUE()
    op_eq:
        pop //  => [] dont need the opcode
        eq
        CONTINUE()
    op_iszero:
        pop //  => [] dont need the opcode
        iszero
        CONTINUE()
    op_and:
        pop //  => [] dont need the opcode
        and
        CONTINUE()
    op_or:
        pop //  => [] dont need the opcode
        or
        CONTINUE()
    op_xor:
        pop //  => [] dont need the opcode
        xor
        CONTINUE()
    op_not:
        pop //  => [] dont need the opcode
        not
        CONTINUE()
    op_byte:
        pop //  => [] dont need the opcode
        byte
        CONTINUE()
    op_shl:
        pop //  => [] dont need the opcode
        shl
        CONTINUE()
    op_shr:
        pop //  => [] dont need the opcode
        shr
        CONTINUE()
    op_sar:
        pop //  => [] dont need the opcode
        sar
        CONTINUE()
    op_sha3:
        pop //  => [] dont need the opcode
        sha3
        CONTINUE()
    op_address:
        pop //  => [] dont need the opcode
        address
        CONTINUE()
    op_balance:
        pop //  => [] dont need the opcode
        balance
        CONTINUE()
    op_origin:
        pop //  => [] dont need the opcode
        origin
        CONTINUE()
    op_caller:
        pop //  => [] dont need the opcode
        caller
        CONTINUE()
    op_callvalue:
        pop //  => [] dont need the opcode
        callvalue
        CONTINUE()
    op_calldataload:
        pop //  => [] dont need the opcode

        // getting calldata is not supported in a vm

        // console.log('calldataload not supported')
        0x63616c6c646174616c6f6164206e6f7420737570706f72746564000000000000
        0x000000000000000000000000000000000000000000000000000000000000001a
        CONSOLE_LOG()

        0x00 0x00 revert

    op_calldatasize:
        pop //  => [] dont need the opcode

        // no call data
        0x0
        CONTINUE()

    op_calldatacopy:
        pop //  => [] dont need the opcode

        // console.log('calldatacopy not supported')
        0x63616c6c64617461636f7079206e6f7420737570706f72746564000000000000
        0x000000000000000000000000000000000000000000000000000000000000001a
        CONSOLE_LOG()

        0x00 0x00 revert

    op_codesize:
        pop //  => [] dont need the opcode

        // code size is the same as calldata size
        calldatasize

        CONTINUE()

    op_codecopy:
        pop //  => [] dont need the opcode

        // codecopy is the same as calldatacopy
        calldatasize

        CONTINUE()

    op_gasprice:
        pop //  => [] dont need the opcode
        gasprice
        CONTINUE()
    op_extcodesize:
        pop //  => [] dont need the opcode
        extcodesize
        CONTINUE()
    op_extcodecopy:
        pop //  => [] dont need the opcode
        extcodecopy
        CONTINUE()
    op_returndatasize:
        pop //  => [] dont need the opcode
        returndatasize
        CONTINUE()
    op_returndatacopy:
        pop //  => [] dont need the opcode
        returndatacopy
        CONTINUE()
    op_extcodehash:
        pop //  => [] dont need the opcode
        extcodehash
        CONTINUE()
    op_blockhash:
        pop //  => [] dont need the opcode
        blockhash
        CONTINUE()
    op_coinbase:
        pop //  => [] dont need the opcode
        coinbase
        CONTINUE()
    op_timestamp:
        pop //  => [] dont need the opcode
        timestamp
        CONTINUE()
    op_number:
        pop //  => [] dont need the opcode
        number
        CONTINUE()
    op_difficulty:
        pop //  => [] dont need the opcode
        difficulty
        CONTINUE()
    op_gaslimit:
        pop //  => [] dont need the opcode
        gaslimit
        CONTINUE()
    op_chainid:
        pop //  => [] dont need the opcode
        chainid
        CONTINUE()
    op_selfbalance:
        pop //  => [] dont need the opcode
        selfbalance
        CONTINUE()
    op_basefee:
        // basefee not supported by huff ?!
        notimplemented jump
    op_pop:
        pop //  => [] dont need the opcode
        pop
        CONTINUE()
    op_mload:
        pop //  => [] dont need the opcode

        // fix the memory offset load from, and execute
        FIX_MEMOFFSET()
        mload

        CONTINUE()
    op_mstore:
        pop //  => [] dont need the opcode

        // fix the memory offset to store at, and execute
        FIX_MEMOFFSET()
        mstore

        CONTINUE()

    op_mstore8:
        pop //  => [] dont need the opcode

        // fix the memory offset to store at, and execute
        FIX_MEMOFFSET()
        mstore8

        CONTINUE()
    op_sload:
        pop //  => [] dont need the opcode
        sload
        CONTINUE()
    op_sstore:
        pop //  => [] dont need the opcode

        // check can store things here
        CHECK_SSTORE()

        sstore
        CONTINUE()
    op_jump:
        pop //  => [] dont need the opcode

        op_jump_impl:
            // move pointer to location
            GOTO_AND_ADVANCE() // => [opcode]

            // check that the current opcode is a jumpdest
            0x5B eq iszero op_jump_fail jumpi

            CONTINUE()

            op_jump_fail:
                // console.log('expecting JUMPDEST opcode')
                0x657870656374696e67204a554d5044455354206f70636f646500000000000000
                0x0000000000000000000000000000000000000000000000000000000000000019
                CONSOLE_LOG()
                0x00 0x00 revert

    op_jumpi:
        pop //  => [] dont need the opcode

        swap1 // get the condition on top
        op_jump_impl jumpi // goto jump if condition is ok
        CONTINUE() // otherwise, continue

    op_pc:
        pop //  => [] dont need the opcode

        // load pointer, but it has advanced => remove 1
        0x1
        [EXEC_POINTER_MSLOT] mload
        sub

        CONTINUE()

    op_msize:
        pop //  => [] dont need the opcode

        // get hypervisor's reserved memory size
        0x0
        FIX_MEMOFFSET()

        // fixed memory
        msize
        sub

        CONTINUE()

    op_gas:
        pop //  => [] dont need the opcode
        gas
        CONTINUE()
    op_jumpdest:
        pop //  => [] dont need the opcode
        // do nothing
        CONTINUE()

    op_pushi:
        // TODO refactor... this can be much more efficient.
        // 1) avoid an mload and a calldataload
        //       instead of 'dup1' leading to stack [opcode, opcode] before call to JUMP_TO_OPCODE(),
        //        have a stack like [instruction, opcode], then pick data directly from instruction.
        //      nb: this wont work for push32, which will need a calldataload :/ (because the instruction is offseted by one byte of opcode)
        //
        // 2) avoid having a 'pop' by any other instruction just because we need it in push
        //
        // 3) avoid an mload and an mstore by not calling INCREMENT_EXEC_PTR_N() in mstore...
        //    embbed this logic in the exec pointer incrementation which is in CONTINUE()
        //    but not with branching... prefer masking, multiplications, adds, ... find something clever.
        //
        // 4) maybe the multiple-implementation is more effective ? (op_push1, op_push2,... instead of only one op_pushi)


        // compute the number of bytes to push, based on the opcode
        0x5f // => [0x5f, opcode]
        swap1  // => [opcode, 0x5f]
        sub //  => [i]

        // get data to push
        PICK_DATA()

        // // console.log('push')
        // 0x7075736800000000000000000000000000000000000000000000000000000000
        // 0x0000000000000000000000000000000000000000000000000000000000000004
        // CONSOLE_LOG()
        // CONSOLE_LOG_UINT()

        CONTINUE()

    op_dup1:
        pop //  => [] dont need the opcode
        dup1
        CONTINUE()
    op_dup2:
        pop //  => [] dont need the opcode
        dup2
        CONTINUE()
    op_dup3:
        pop //  => [] dont need the opcode
        dup3
        CONTINUE()
    op_dup4:
        pop //  => [] dont need the opcode
        dup4
        CONTINUE()
    op_dup5:
        pop //  => [] dont need the opcode
        dup5
        CONTINUE()
    op_dup6:
        pop //  => [] dont need the opcode
        dup6
        CONTINUE()
    op_dup7:
        pop //  => [] dont need the opcode
        dup7
        CONTINUE()
    op_dup8:
        pop //  => [] dont need the opcode
        dup8
        CONTINUE()
    op_dup9:
        pop //  => [] dont need the opcode
        dup9
        CONTINUE()
    op_dup10:
        pop //  => [] dont need the opcode
        dup10
        CONTINUE()
    op_dup11:
        pop //  => [] dont need the opcode
        dup11
        CONTINUE()
    op_dup12:
        pop //  => [] dont need the opcode
        dup12
        CONTINUE()
    op_dup13:
        pop //  => [] dont need the opcode
        dup13
        CONTINUE()
    op_dup14:
        pop //  => [] dont need the opcode
        dup14
        CONTINUE()
    op_dup15:
        pop //  => [] dont need the opcode
        dup15
        CONTINUE()
    op_dup16:
        pop //  => [] dont need the opcode
        dup16
        CONTINUE()
    op_swap1:
        pop //  => [] dont need the opcode
        swap1
        CONTINUE()
    op_swap2:
        pop //  => [] dont need the opcode
        swap2
        CONTINUE()
    op_swap3:
        pop //  => [] dont need the opcode
        swap3
        CONTINUE()
    op_swap4:
        pop //  => [] dont need the opcode
        swap4
        CONTINUE()
    op_swap5:
        pop //  => [] dont need the opcode
        swap5
        CONTINUE()
    op_swap6:
        pop //  => [] dont need the opcode
        swap6
        CONTINUE()
    op_swap7:
        pop //  => [] dont need the opcode
        swap7
        CONTINUE()
    op_swap8:
        pop //  => [] dont need the opcode
        swap8
        CONTINUE()
    op_swap9:
        pop //  => [] dont need the opcode
        swap9
        CONTINUE()
    op_swap10:
        pop //  => [] dont need the opcode
        swap10
        CONTINUE()
    op_swap11:
        pop //  => [] dont need the opcode
        swap11
        CONTINUE()
    op_swap12:
        pop //  => [] dont need the opcode
        swap12
        CONTINUE()
    op_swap13:
        pop //  => [] dont need the opcode
        swap13
        CONTINUE()
    op_swap14:
        pop //  => [] dont need the opcode
        swap14
        CONTINUE()
    op_swap15:
        pop //  => [] dont need the opcode
        swap15
        CONTINUE()
    op_swap16:
        pop //  => [] dont need the opcode
        swap16
        CONTINUE()
    op_log0:
        pop //  => [] dont need the opcode
        log0
        CONTINUE()
    op_log1:
        pop //  => [] dont need the opcode
        log1
        CONTINUE()
    op_log2:
        pop //  => [] dont need the opcode
        log2
        CONTINUE()
    op_log3:
        pop //  => [] dont need the opcode
        log3
        CONTINUE()
    op_log4:
        pop //  => [] dont need the opcode
        log4
        CONTINUE()
    op_create:
        notimplemented jump
    op_call:
        pop //  => [] dont need the opcode

        // on host stack, we have [gas address value argsOffset argsSize retOffset retSize]
        // - fix argsOffset
        swap3
        FIX_MEMOFFSET()
        swap3

        // - fix retOffset
        swap5
        FIX_MEMOFFSET()
        swap5

        // - check can call
        CHECK_CALL()


        call
        CONTINUE()
    op_callcode:
        pop //  => [] dont need the opcode

        // on host stack, we have [gas address value argsOffset argsSize retOffset retSize]
        // - fix argsOffset
        swap3
        FIX_MEMOFFSET()
        swap3

        // - fix retOffset
        swap5
        FIX_MEMOFFSET()
        swap5

        // - check can call
        CHECK_CALLCODE()

        callcode
        CONTINUE()
    op_return:
        pop //  => [] dont need the opcode

        // fix the memory offset to return
        FIX_MEMOFFSET()

        // execute return
        return
    op_delegatecall:
        pop //  => [] dont need the opcode

        // on host stack, we have [gas address argsOffset argsSize retOffset retSize]
        // - fix argsOffset
        swap2
        FIX_MEMOFFSET()
        swap2

        // - fix retOffset
        swap4
        FIX_MEMOFFSET()
        swap4

        // - check can call
        CHECK_DELEGATECALL()

        delegatecall
        CONTINUE()
    op_create2:
        notimplemented jump
    op_staticcall:
        pop //  => [] dont need the opcode

        // on host stack, we have [gas address argsOffset argsSize retOffset retSize]
        // - fix argsOffset
        swap2
        FIX_MEMOFFSET()
        swap2

        // - fix retOffset
        swap4
        FIX_MEMOFFSET()
        swap4

        // - check can call
        CHECK_STATICCALL()

        staticcall
        CONTINUE()
    op_revert:
        pop //  => [] dont need the opcode
        revert
        CONTINUE()
    op_invalid:
        pop //  => [] dont need the opcode
        invalid
        CONTINUE()
    selfdestruct:
        pop //  => [] dont need the opcode

        // console.log('selftdestruct not supported')
        0x73656c666465737472756374206e6f7420737570706f72746564000000000000
        0x000000000000000000000000000000000000000000000000000000000000001a
        CONSOLE_LOG()

        0x00 0x00 revert
    unused:
        0x756e6b6e6f776e206f70636f64653a0000000000000000000000000000000000
        0x000000000000000000000000000000000000000000000000000000000000000f
        CONSOLE_LOG()
        CONSOLE_LOG_UINT() // log opcode
        0x00 0x00 revert

}
